{"ast":null,"code":"var _jsxFileName = \"/home/azizecomm/Dropbox/code/javascript/fcc/react-get-started/src/App.js\";\n\n/**\n * App.js \n * - The main app component\n * - A container of all major components\n */\n// Load react and components from `node_modules`\nimport React, { useState } from 'react'; // import custom stylesheet\n\nimport './contact.css';\n/* \n * App Component \n */\n\nconst App = () => {\n  // in a real application, data is acquired as a result of an API call, ...\n  // ... data usually in the form of an array of data objects\n  // so this data is only a placeholder until the real API call\n  // const data = [\n  //   { name: \"Jenny Han\", email: \"jenny.han@notreal.com\", age: 25 },\n  //   { name: \"Jason Long\", email: \"jason.long@notreal.com\", age: 45 },\n  //   { name: \"Peter Pan\", email: \"peter.pan@neverland.com\", age: 100 }\n  // ];\n  // Please note that a state in React is a good for holding data that can change\n  // so our contacts list is a good candidate for this\n  const [contacts, setContacts] = useState([]);\n  fetch(\"https://randomuser.me/api/?results=3\"); //   .then(response => response.json())\n  //   .then(data => console.log(data));\n  // The contents of this return statement, \n  // rendered as HTML and populated in index.html root element\n\n  return (\n    /*#__PURE__*/\n    // Please note that the empty brackets are React.Fragments\n    // They are not a part of the rendered HTML\n    // But are necessary here, since components expect a SINGLE component return ...\n    // ... and a list of components go against that principle!\n    React.createElement(React.Fragment, null, // regular function //////////\n    // contacts.map(function (contact) {\n    //   return <ContactCard\n    //     avatar=\"https://via.placeholder.com/150\"\n    //     name={contact.name}\n    //     email={contact.email}\n    //     age={contact.age}\n    //   />\n    // })\n    // arrow function expression, braces need explicit return //////////\n    // contacts.map(contact => {\n    //   return <ContactCard\n    //     avatar=\"https://via.placeholder.com/150\"\n    //     name={contact.name}\n    //     email={contact.email}\n    //     age={contact.age}\n    //   />\n    // })\n    // arrow function expression, paranthesis implicit return //////////\n    contacts.map(contact => /*#__PURE__*/React.createElement(ContactCard, {\n      avatar: \"https://via.placeholder.com/150\",\n      name: contact.name,\n      email: contact.email,\n      age: contact.age,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    })))\n  );\n};\n/*\n * Contact Component\n * It exists here just for ease,\n * in the real world, components should ideally be in there own file\n */\n\n\nconst ContactCard = props => {\n  // destructuring an array\n  // `useState` takes in an initial value and returns ...\n  // ... 1. reference to state value \n  // ... 2. function to allow changing the state\n  const [showAge, setShowAge] = useState(false); // it should be noted that this state only represents one instance of the component\n  // so if there are 3 instances, i.e. 3 cards, each card will have it's own state representation\n  // please note that the const has not been made uppercase, ...\n  // ... as this is only used internally here,\n  // AirBnB guidelines state that only exported variables that are const ...\n  // ... should be made uppercase\n\n  return (\n    /*#__PURE__*/\n    // Please note that anything between `<div></div>` is JSX,\n    // JavaScript XML, NOT HTML or JavaScript,\n    // Therefore, comments work outside of the `<div></div>` segment\n    // also note `className` (react) vs `class` (html)\n    React.createElement(\"div\", {\n      className: \"contact-card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"https://via.placeholder.com/150\",\n      alt: \"profile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"user-details\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, \"Name: \", props.name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, \"Email: \", props.email), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => setShowAge(!showAge),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, !showAge ? 'Show' : 'Hide', \" Age\"), // within this `<div></div>` segment to use javascript, \n    // like comments, please enclose within `{}`\n    // showAge ? <p>Age: 25</p> : false\n    // However, please note that it's possible to directly use JSX within JS\n    showAge && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 22\n      }\n    }, \"Age: \", props.age))) // Comments work here too!\n\n  );\n};\n\nexport default App;","map":{"version":3,"sources":["/home/azizecomm/Dropbox/code/javascript/fcc/react-get-started/src/App.js"],"names":["React","useState","App","contacts","setContacts","fetch","map","contact","name","email","age","ContactCard","props","showAge","setShowAge"],"mappings":";;AAAA;;;;;AAQA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;AACA,OAAO,eAAP;AAIA;;;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,EAAD,CAAxC;AAEAI,EAAAA,KAAK,CAAC,sCAAD,CAAL,CAfgB,CAgBhB;AACA;AAGA;AACA;;AACA;AAAA;AAEE;AACA;AACA;AACA;AACA,8CAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAF,IAAAA,QAAQ,CAACG,GAAT,CAAaC,OAAO,iBAClB,oBAAC,WAAD;AACE,MAAA,MAAM,EAAC,iCADT;AAEE,MAAA,IAAI,EAAEA,OAAO,CAACC,IAFhB;AAGE,MAAA,KAAK,EAAED,OAAO,CAACE,KAHjB;AAIE,MAAA,GAAG,EAAEF,OAAO,CAACG,GAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAvBJ;AANF;AAwCD,CA9DD;AAkEA;;;;;;;AAKA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAE3B;AACA;AACA;AACA;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,KAAD,CAAtC,CAN2B,CAQ3B;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAAA;AACE;AACA;AACA;AAEA;AACA;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,GAAG,EAAC,iCAAT;AAA2C,MAAA,GAAG,EAAC,SAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAUW,KAAK,CAACJ,IAAhB,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAWI,KAAK,CAACH,KAAjB,CAFF,eAQE;AAAQ,MAAA,OAAO,EAAE,MAAMK,UAAU,CAAC,CAACD,OAAF,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8C,CAACA,OAAD,GAAW,MAAX,GAAoB,MAAlE,SARF,EAWI;AACA;AACA;AAEA;AACAA,IAAAA,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAASD,KAAK,CAACF,GAAf,CAhBf,CAFF,CANF,CA8BE;;AA9BF;AAgCD,CAhDD;;AAkDA,eAAeR,GAAf","sourcesContent":["/**\n * App.js \n * - The main app component\n * - A container of all major components\n */\n\n\n\n// Load react and components from `node_modules`\nimport React, { useState } from 'react';\n\n// import custom stylesheet\nimport './contact.css';\n\n\n\n/* \n * App Component \n */\nconst App = () => {\n\n  // in a real application, data is acquired as a result of an API call, ...\n  // ... data usually in the form of an array of data objects\n  // so this data is only a placeholder until the real API call\n  // const data = [\n  //   { name: \"Jenny Han\", email: \"jenny.han@notreal.com\", age: 25 },\n  //   { name: \"Jason Long\", email: \"jason.long@notreal.com\", age: 45 },\n  //   { name: \"Peter Pan\", email: \"peter.pan@neverland.com\", age: 100 }\n  // ];\n\n  // Please note that a state in React is a good for holding data that can change\n  // so our contacts list is a good candidate for this\n  const [contacts, setContacts] = useState([]);\n\n  fetch(\"https://randomuser.me/api/?results=3\")\n  //   .then(response => response.json())\n  //   .then(data => console.log(data));\n\n\n  // The contents of this return statement, \n  // rendered as HTML and populated in index.html root element\n  return (\n\n    // Please note that the empty brackets are React.Fragments\n    // They are not a part of the rendered HTML\n    // But are necessary here, since components expect a SINGLE component return ...\n    // ... and a list of components go against that principle!\n    <>\n      {\n        // regular function //////////\n        // contacts.map(function (contact) {\n        //   return <ContactCard\n        //     avatar=\"https://via.placeholder.com/150\"\n        //     name={contact.name}\n        //     email={contact.email}\n        //     age={contact.age}\n        //   />\n        // })\n\n        // arrow function expression, braces need explicit return //////////\n        // contacts.map(contact => {\n        //   return <ContactCard\n        //     avatar=\"https://via.placeholder.com/150\"\n        //     name={contact.name}\n        //     email={contact.email}\n        //     age={contact.age}\n        //   />\n        // })\n\n        // arrow function expression, paranthesis implicit return //////////\n        contacts.map(contact => (\n          <ContactCard\n            avatar=\"https://via.placeholder.com/150\"\n            name={contact.name}\n            email={contact.email}\n            age={contact.age}\n          />\n        ))\n      }\n    </>\n  )\n};\n\n\n\n/*\n * Contact Component\n * It exists here just for ease,\n * in the real world, components should ideally be in there own file\n */\nconst ContactCard = props => {\n\n  // destructuring an array\n  // `useState` takes in an initial value and returns ...\n  // ... 1. reference to state value \n  // ... 2. function to allow changing the state\n  const [showAge, setShowAge] = useState(false);\n\n  // it should be noted that this state only represents one instance of the component\n  // so if there are 3 instances, i.e. 3 cards, each card will have it's own state representation\n\n  // please note that the const has not been made uppercase, ...\n  // ... as this is only used internally here,\n  // AirBnB guidelines state that only exported variables that are const ...\n  // ... should be made uppercase\n\n  return (\n    // Please note that anything between `<div></div>` is JSX,\n    // JavaScript XML, NOT HTML or JavaScript,\n    // Therefore, comments work outside of the `<div></div>` segment\n\n    // also note `className` (react) vs `class` (html)\n    <div className=\"contact-card\">\n      <img src=\"https://via.placeholder.com/150\" alt=\"profile\" />\n      <div className=\"user-details\">\n        <p>Name: {props.name}</p>\n        <p>Email: {props.email}</p>\n\n        {\n          // here use the 2nd returned value of useState, the `setShowAge` function,\n          // to help toggle the current state  \n        }\n        <button onClick={() => setShowAge(!showAge)}>{!showAge ? 'Show' : 'Hide'} Age</button>\n\n        {\n          // within this `<div></div>` segment to use javascript, \n          // like comments, please enclose within `{}`\n          // showAge ? <p>Age: 25</p> : false\n\n          // However, please note that it's possible to directly use JSX within JS\n          showAge && <p>Age: {props.age}</p>\n        }\n\n      </div>\n    </div>\n\n    // Comments work here too!\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}